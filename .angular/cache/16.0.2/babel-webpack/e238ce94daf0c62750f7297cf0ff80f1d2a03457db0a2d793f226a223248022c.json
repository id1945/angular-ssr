{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nclass AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    const token = '1234567890';\n    if (this.authService.isAuthenticated) {\n      // Token in Header einfügen\n      const reqWithToken = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return next.handle(reqWithToken);\n    } else {\n      // Request unverändert weitergeben\n      return next.handle(request);\n    }\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});\nexport { AuthInterceptor };","map":{"version":3,"names":["AuthInterceptor","constructor","authService","intercept","request","next","token","isAuthenticated","reqWithToken","clone","setHeaders","Authorization","handle","i0","ɵɵinject","i1","AuthService","factory","ɵfac"],"sources":["C:\\Users\\duong\\Downloads\\16f-ssr\\src\\app\\shared\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<unknown>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<unknown>> {\r\n    const token = '1234567890';\r\n\r\n    if (this.authService.isAuthenticated) {\r\n      // Token in Header einfügen\r\n      const reqWithToken = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      return next.handle(reqWithToken);\r\n    } else {\r\n      // Request unverändert weitergeben\r\n      return next.handle(request);\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;AAUA,MACaA,eAAe;EAE1BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAASA,CACPC,OAA6B,EAC7BC,IAAiB;IAEjB,MAAMC,KAAK,GAAG,YAAY;IAE1B,IAAI,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE;MACpC;MACA,MAAMC,YAAY,GAAGJ,OAAO,CAACK,KAAK,CAAC;QACjCC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUL,KAAK;;OAEjC,CAAC;MAEF,OAAOD,IAAI,CAACO,MAAM,CAACJ,YAAY,CAAC;KACjC,MAAM;MACL;MACA,OAAOH,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;;EAE/B;;AAvBWJ,eAAe,C;mBAAfA,eAAe,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;AAAA;AAAfhB,eAAe,C;SAAfA,eAAe;EAAAiB,OAAA,EAAfjB,eAAe,CAAAkB;AAAA;SAAflB,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}